#!/bin/sh
set -e

cd /app

if [ -f /app/Gemfile ]; then
	echo "Gemfile dected!"
	echo "Bundling ruby gems..."
	bundle install --path /rook/cache/bundle
fi

# Check if the Gemfile contains a non-commented "gem 'rails'"
if grep -qs -e "^\s*gem 'rails'" /app/Gemfile; then
	echo "Rails application detected"
	echo "Initializing database"

	# We know the database from the dependency env variables set in init_wrapper
	if [ $ROOK_MYSQL_5_5 = "true" ]; then
		
		echo "Setting up MySQL configuration"
		if [ -f /app/config/database.yml ] && ! grep -Fqs "Rook" /app/config/database.yml; then
			echo "Backup old database.yml"
			mv /app/config/database.yml /app/config/database.yml.old
		fi
		cp /tmp/templates/mysql-5.5/database.yml /app/config/database.yml
		sed -i "s/host: <ROOK>/host: $MYSQL_PORT_3306_TCP_ADDR/g" /app/config/database.yml

		# Wait for the local container network to come online
		while ! grep -q ^1$ /sys/class/net/eth1/carrier 2>/dev/null
			do sleep 1
		done

		# TODO: Find a method to wait until mysql is available 
		# that does not require mysql-client 

		set +e
		# This returns a 0 exit code if the mysql command does not fail
		echo 'exit' | mysql --host=$MYSQL_PORT_3306_TCP_ADDR --user=app --password=rook

		# Check if the exit code is 0. If it isn't, mysql is not yet online.
		while ! [ $? = 0 ]
		do
			echo "MySQL is not yet online. Waiting."
			sleep 1
			echo 'exit' | mysql --host=$MYSQL_PORT_3306_TCP_ADDR --user=app --password=rook
		done
		set -e

	elif [ $ROOK_POSTRESQL = "true" ]; then
		# TODO: Configure /app/config/database.yml for postgresql
		echo "Setting up PostgreSQL configuration"
	else
		# TODO: Configure /app/config/database.yml for sqlite
		echo "Setting up SQLite configuration"
	fi

	set +e
	bundle exec rake db:create
	bundle exec rake db:migrate
	bundle exec rake db:seed
fi
exit 0